from datetime import datetime
from datetime import timezone
import json
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.providers.sqlite.operators.sqlite import SqliteOperator
from airflow.providers.http.sensors.http import HttpSensor
from airflow.providers.http.operators.http import SimpleHttpOperator

from airflow.models import Variable


Coords = {
    "Lviv" : [49.8397, 24.0297],
    "Kyiv" : [50.4504, 30.5245],
    "Kharkiv" : [50.0020, 36.3074],
    "Odesa" : [46.4702, 30.7306],
    "Zhmerynka" : [49.0391, 28.1086]
}

def _param(ti, ds):
    timestamp = int(
        datetime.strptime(ds, "%Y-%m-%d")
        .replace(tzinfo=timezone.utc)
        .timestamp()
    )
    return str(timestamp)

def _process_weather(ti, ds):
    info = ti.xcom_pull(task_ids=f"extract_data_from_{city}")
    curr = info["data"][0]
    timestamp = curr["dt"]
    temp = curr["temp"]
    humidity = curr["humidity"]
    cloudiness = curr["clouds"]
    wind_speed = curr["wind_speed"]
    return timestamp, temp, humidity, cloudiness, wind_speed

with DAG(dag_id="task_1", schedule_interval="@daily", start_date=datetime(2023, 11, 27), catchup=True):

    db_create = SqliteOperator(
    task_id="create_table_sqlite",
    sqlite_conn_id="airflow_custom_conn",
    sql="""
    CREATE TABLE IF NOT EXISTS HW_1_fin
    (
    city TEXT,
    timestamp TIMESTAMP,
    temp FLOAT,
    humidity INT,
    cloudiness TEXT,
    wind_speed FLOAT
    );"""
    )
    
    check_api = HttpSensor(
    task_id="check_api",
    http_conn_id="weather_connection",
    endpoint="data/3.0/onecall",
    request_params={
        "appid": Variable.get("WEATHER_API_KEY"),
        "lat": str(Coords["Lviv"][0]),
        "lon": str(Coords["Lviv"][1])})

    for city in Coords:

        coord_1 = Coords[city][0]
        coord_2 = Coords[city][1]

        get_param = PythonOperator(
            task_id=f"get_params_{city}", python_callable=_param
        )

        extract_data = SimpleHttpOperator(
        task_id=f"extract_data_from_{city}",
        http_conn_id="weather_connection",
        endpoint="data/3.0/onecall/timemachine",
        data={
            "appid": Variable.get("WEATHER_API_KEY"),
            "lat": str(coord_1),
            "lon": str(coord_2),
            "dt": f"""{{{{ti.xcom_pull(task_ids='get_params_{city}')}}}}""",
            "exclude": "minutely,hourly,daily,alerts",},
        method="GET",
        response_filter=lambda x: json.loads(x.text),
        log_response=True
        )


        process_data = PythonOperator(
        task_id=f"process_data_for_{city}",
        python_callable=_process_weather
        )


        inject_data = SqliteOperator(
        task_id=f"inject_data_from_{city}",
        sqlite_conn_id="airflow_custom_conn",
        sql=f"""
        INSERT INTO HW_1_fin (city, timestamp, temp, humidity, cloudiness, wind_speed) VALUES
        ('{city}',
        {{{{ti.xcom_pull(task_ids='process_data_for_{city}')[0]}}}},
        {{{{ti.xcom_pull(task_ids='process_data_for_{city}')[1]}}}},
        {{{{ti.xcom_pull(task_ids='process_data_for_{city}')[2]}}}},
        {{{{ti.xcom_pull(task_ids='process_data_for_{city}')[3]}}}},
        {{{{ti.xcom_pull(task_ids='process_data_for_{city}')[4]}}}});
        """,
        )

        db_create >> check_api >> get_param >> extract_data >> process_data >> inject_data
